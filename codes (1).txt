TCP SERVER :

#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>

int main(){
        int serversocket,clientsocket,port;
        struct sockaddr_in serveraddr,clientaddr;
        socklen_t len;
        char message[50];
        struct serveraddr;
        serversocket = socket(AF_INET,SOCK_STREAM,0);
        bzero((char*)&serveraddr,sizeof(serveraddr));
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        serveraddr.sin_addr.s_addr = INADDR_ANY;
        bind(serversocket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
        bzero((char*)&clientaddr,sizeof(clientaddr));
        len = sizeof(clientaddr);
        listen(serversocket,5);
        printf("\nWAITING FOR CLIENT CONNECTION\n");
        printf("\nhai:");
        clientsocket = accept(serversocket,(struct sockaddr*)&clientaddr,&len);
        printf("\nClient connectivity received\n");
        printf("\nReading message fromthe client\n");
        read(clientsocket,message,sizeof(message));
        printf("\nThe client has sent %s",message);
        printf("\nsending message to the client\n");
        write(clientsocket,"YOUR MESSAGE RECEIVED",sizeof("YOUR MESSAGE RECEIVED"));
        close(clientsocket);
        close(serversocket);
}


TCP CLIENT :

#include<stdio.h>
#include<netinet/in.h>
#include<sys/types.h>
#include<strings.h>
#include<netdb.h>

int main(){
        int clientsocket,port;
        struct sockaddr_in serveraddr;
        socklen_t len;
        char message[50];
        clientsocket = socket(AF_INET,SOCK_STREAM,0);
        bzero((char*)&serveraddr,sizeof(serveraddr));
        len = sizeof(serveraddr);
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        printf("\nTRYING TO CONNECT TO THE SERVER\n");
        connect(clientsocket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
        printf("\nConnected to the server\n");
        printf("\nsending messsage for server connection");
        send(clientsocket,"HI,IAM CLIENT....",sizeof("HI,IAM CLIENT...."),0);
        printf("\nreceiving message from server\n");
        recv(clientsocket,message,sizeof(message),0);
        printf("\nmessage received.\t%s\n",message);
        close(clientsocket);
}

OUTPUT - SERVER

Enter the port number2410

WAITING FOR CLIENT CONNECTION

hai:
Client connectivity received

Reading message fromthe client

The client has sent HI,IAM CLIENT....
sending message to the client


OUTPUT - CLIENT

Enter the port number2410

TRYING TO CONNECT TO THE SERVER

Connected to the server

sending messsage for server connection
receiving message from server

message received.	YOUR MESSAGE RECEIVED


TCP - ADDITION - SERVER



#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<stdlib.h>
#include<netdb.h>

int main(){
        int serversocket,clientsocket,port;
        struct sockaddr_in serveraddr,clientaddr;
        socklen_t len;
        int a,b,sum = 0;
        struct serveraddr;
        serversocket = socket(AF_INET,SOCK_STREAM,0);
        bzero((char*)&serveraddr,sizeof(serveraddr));
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        serveraddr.sin_addr.s_addr = INADDR_ANY;
        bind(serversocket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
        bzero((char*)&clientaddr,sizeof(clientaddr));
        len = sizeof(clientaddr);
        listen(serversocket,5);
        printf("\nWAITING FOR CLIENT CONNECTION\n");
        printf("\nhai:");
        clientsocket = accept(serversocket,(struct sockaddr*)&clientaddr,&len);
        printf("\nClient connectivity received\n");
        printf("\nReading numbers from the client\n");
        read(clientsocket,&a,sizeof(&a));
        read(clientsocket,&b,sizeof(&b));
        printf("\nThe client has sent %d and %d",a,b);
        printf("\nsending sum to the client\n");
        sum = a+b;
        printf("sum is %d",sum);
        write(clientsocket,&sum,sizeof(&sum));
        close(clientsocket);
        close(serversocket);
}


TCP - CLIENT - ADDITION



#include<stdio.h>
#include<netinet/in.h>
#include<sys/types.h>
#include<strings.h>
#include<netdb.h>

int main(){
        int clientsocket,port;
        struct sockaddr_in serveraddr;
        socklen_t len;
        int a,b,sum = 0;
        clientsocket = socket(AF_INET,SOCK_STREAM,0);
        bzero((char*)&serveraddr,sizeof(serveraddr));
        len = sizeof(serveraddr);
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        printf("\nTRYING TO CONNECT TO THE SERVER\n");
        connect(clientsocket,(struct sockaddr*)&serveraddr,sizeof(serveraddr));
        printf("\nConnected to the server\n");
        printf("Enter two numbers for addition\n");
        scanf("%d%d",&a,&b);
        send(clientsocket,&a,sizeof(&a),0);
        send(clientsocket,&b,sizeof(&b),0);
        printf("\nReceiving sum from server\n");
        recv(clientsocket,&sum,sizeof(&sum),0);
        printf("\nSum received : \t%d\n",sum);
        close(clientsocket);
}


OUTPUT - SERVER SIDE

Enter the port number2410

WAITING FOR CLIENT CONNECTION

hai:
Client connectivity received

Reading numbers from the client

The client has sent 2 and 5
sending sum to the client
sum is 7


OUTPUT - CLIENT SIDE


Enter the port number2410

TRYING TO CONNECT TO THE SERVER

Connected to the server
Enter two numbers for addition
2 5

Receiving sum from server

Sum received : 	7


UDP - SERVER


#include<stdio.h>
#include<strings.h>
#include<unistd.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<netdb.h>
int main(){
        int serversocket,port;
        struct sockaddr_in serveraddr,clientaddr;
        socklen_t len;
        char message[50];
        serversocket = socket(AF_INET,SOCK_DGRAM,0);
        bzero((char *) &serveraddr,sizeof(serveraddr));
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number : ");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        serveraddr.sin_addr.s_addr = INADDR_ANY;
        bind(serversocket,(struct sockaddr*) &serveraddr,sizeof(serveraddr));
        printf("\nWaiting for the client connection\n");
        bzero((char *) &clientaddr,sizeof(clientaddr));
        len = sizeof(clientaddr);
        recvfrom(serversocket,message,sizeof(message),0,(struct sockaddr*) &clientaddr,&len);
        printf("\nConnection received from client\n");
        printf("\nThe client has send :\t %s\n",message);
        printf("\nSending message to the client\n");
        sendto(serversocket,"YOUR MESSAGE RECEIVED",sizeof("YOUR MESSAGE RECEIVED"),0,(struct sockaddr*) &clientaddr,sizeof(clientaddr));
        close(serversocket);
}

UDP - CLIENT


#include<netinet/in.h>
#include<netdb.h>
#include<stdio.h>
#include<strings.h>
int main(){
        int clientsocket,port;
        struct sockaddr_in serveraddr;
        socklen_t len;
        struct hostent *server;
        char message[50];
        clientsocket = socket(AF_INET,SOCK_DGRAM,0);
        bzero((char *) &serveraddr,sizeof(serveraddr));
        len = sizeof(serveraddr);
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number : ");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        fgets(message,2,stdin);
        printf("\nsending message for server connections\n");
        sendto(clientsocket,"HI I AM CLIENT....",sizeof("HI I AM CLIENT...."),0,(struct sockaddr*) &serveraddr,sizeof(serveraddr));
        printf("\n Receiving message from server\n");
        recvfrom(clientsocket,message,sizeof(message),0,(struct sockaddr*) &serveraddr,&len);
        printf("\n message received\t%s\n",message);
        close(clientsocket);
}



OUTPUT - SERVERSIDE


Enter the port number : 2410

Waiting for the client connection

Connection received from client

The client has send :	 HI I AM CLIENT....

Sending message to the client




OUTPUT - CLIENTSIDE

Enter the port number : 2410 

sending message for server connections

 Receiving message from server

 message received	YOUR MESSAGE RECEIVED


UDP - FACTORIAL - SERVER


#include<stdio.h>
#include<strings.h>
#include<unistd.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<netdb.h>
int main(){
        int serversocket,port;
        struct sockaddr_in serveraddr,clientaddr;
        socklen_t len;
        int fact = 1,a,i;
        serversocket = socket(AF_INET,SOCK_DGRAM,0);
        bzero((char *) &serveraddr,sizeof(serveraddr));
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number : ");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        serveraddr.sin_addr.s_addr = INADDR_ANY;
        bind(serversocket,(struct sockaddr*) &serveraddr,sizeof(serveraddr));
        printf("\nWaiting for the client connection\n");
        bzero((char *) &clientaddr,sizeof(clientaddr));
        len = sizeof(clientaddr);
        recvfrom(serversocket,&a,sizeof(&a),0,(struct sockaddr*) &clientaddr,&len);
        printf("\nConnection received from client\n");
        printf("\nThe client has send number :\t %d\n",a);
        for(i=1;i<=a;i++){
                fact = fact*i;
        }
        printf("\nSending factorial to the client\n");
        sendto(serversocket,&fact,sizeof(&fact),0,(struct sockaddr*) &clientaddr,sizeof(clientaddr));
        close(serversocket);
}



UDP - FACTORIAL - CLIENT


#include<netinet/in.h>
#include<netdb.h>
#include<stdio.h>
#include<strings.h>
int main(){
        int clientsocket,port;
        struct sockaddr_in serveraddr;
        socklen_t len;
        struct hostent *server;
        int fact,a;
        clientsocket = socket(AF_INET,SOCK_DGRAM,0);
        bzero((char *) &serveraddr,sizeof(serveraddr));
        len = sizeof(serveraddr);
        serveraddr.sin_family = AF_INET;
        printf("Enter the port number : ");
        scanf("%d",&port);
        serveraddr.sin_port = htons(port);
        fgets(&fact,2,stdin);
        printf("\nEnter the number : \n");
        scanf("%d",&a);
        sendto(clientsocket,&a,sizeof(&a),0,(struct sockaddr*) &serveraddr,sizeof(serveraddr));
        printf("\n Receiving Factorial from server\n");
        recvfrom(clientsocket,&fact,sizeof(&fact),0,(struct sockaddr*) &serveraddr,&len);
        printf("\n Factorial of %d is : \t%d\n",a,fact);
        close(clientsocket);
}




OUTPUT - SERVER SIDE

Enter the port number : 2410

Waiting for the client connection

Connection received from client

The client has send number :	 3

Sending factorial to the client



OUTPUT - CLIENT SIDE


Enter the port number : 2410

Enter the number : 
3

 Receiving Factorial from server

 Factorial of 3 is : 	6




CONCURRENT - SERVER

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<string.h>
#include<netinet/in.h>
#include<errno.h>
#include<time.h>
int main(int argc,char * argv[]){
        int s,t,cp;
        struct sockaddr_in servaddr,cliaddr;
        char buffer[1024];
        time_t ct;
        if(argc != 2){
                printf("\n usage : client <server_adr><port>");
                exit(0);
        }
        if((s = socket(AF_INET,SOCK_DGRAM,0))<0){
                perror("error in socket creation");
                exit(0);
        }
        bzero((char *)&servaddr,sizeof(servaddr));
        servaddr.sin_family = AF_INET;
        servaddr.sin_port = htons((short)atoi(argv[1]));
        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
        if(bind(s,(struct sockaddr*)&servaddr,sizeof(servaddr))<0){
                perror("bind");
                exit(0);
        }
        t = sizeof(cliaddr);
        memset(buffer,0,100);
        while(1){
                if(recvfrom(s,buffer,1024,0,(struct sockaddr*)&cliaddr,&t)<0){
                        perror("error in recvfrom");
                        exit(0);
                }
                ct = time(NULL);
                sprintf(buffer,"%s",ctime(&ct));
                if((cp = fork()) == 0){
                        while(1){
                                if(sendto(s,buffer,sizeof(buffer),0,(struct sockaddr*)&cliaddr,sizeof(cliaddr))<0){
                                        perror("error in sendto");
                                        exit(0);
                                }
                                memset(buffer,0,100);
                                if(recvfrom(s,buffer,1024,0,(struct sockaddr*)&cliaddr,&t) < 0){
                                        perror("error in recvfrom");
                                        exit(0);
                                }
                                sprintf(buffer,"%s",ctime(&ct));
                        }
                }
                else if(cp<0){
                        perror("fork error");
                        exit(0);
                }
        }
        close(s);
        return 0;
}

CONCURRENT - CLIENT


#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<string.h>
#include<netinet/in.h>
#include<errno.h>
#include<time.h>
int main(int argc,char * argv[]){
        int n,s,t;
        struct sockaddr_in servaddr,local,rem;
        char buffer[1024];
        if(argc < 3){
                printf("usage : client < server_addr><port>");
                exit(0);
        }
        if((s=socket(AF_INET,SOCK_DGRAM,0)) < 0){
                perror("error in socket creation");
                exit(0);
        }
        bzero((char *)&local,sizeof(local));
        local.sin_family = AF_INET;
        local.sin_port = htons(6677);
        local.sin_addr.s_addr = inet_addr(argv[1]);
        if(bind(s,(struct sockaddr*) &local,sizeof(local)) == -1){
                perror("bind error");
                exit(1);
        }
        bzero((char *) &servaddr,sizeof(local));
        servaddr.sin_family = AF_INET;
        servaddr.sin_port = htons((short)atoi(argv[1]));
        servaddr.sin_addr.s_addr = inet_addr(argv[1]);
        strcpy(buffer,"TIME");
        if(sendto(s,buffer,sizeof(buffer),0,(struct sockaddr*)&servaddr,sizeof(servaddr))< 0){
                perror("error in sendto");
                exit(0);
        }
        t = sizeof(servaddr);
        printf("the current time is : ");
        if((n = recvfrom(s,buffer,1024,0,(struct sockaddr*)&servaddr,&t)) > 0){
                buffer[n] = '\0';
                fputs(buffer,stdout);
        }
        else{
                if(n < 0){
                        perror("error in readfrom");
                        exit(0);
                }
                else{
                        printf("server closed connection\n");
                        exit(1);
                }
                memset(buffer,0,100);
                close(s);
                return 0;
        }
}



DISTANCE VECTOR ROUTING

#include<stdio.h>
struct node{
        unsigned dist[20];
        unsigned from[20];
}rt[10];
int main(){
        int costmat[20][20];
        int nodes,i,j,k,count = 0;
        printf("\n Enter the number of nodes : ");
        scanf("%d",&nodes);
        printf("\nEnter the cost matrix :\n");
        for(i=0;i<nodes;i++){
                for(j=0;j<nodes;j++){
                        scanf("%d",&costmat[i][j]);
                        rt[i].dist[j] = costmat[i][j];
                        rt[i].from[j] = j;
                }
        }
        do{
                count = 0;
                for(i=0;i<nodes;i++){
                        for(j=0;j<nodes;j++){
                                for(k=0;k<nodes;k++){
                                        if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j]){
                                                rt[i].dist[j] = rt[i].dist[k]+rt[k].dist[j];
                                                rt[i].from[j] = k;
                                                count++;
                                        }
                                }
                        }
                }
        }while(count!=0);
        for(i=0;i<nodes;i++){
                printf("\n\nFor router %d\n",i+1);
                for(j=0;j<nodes;j++){
                        printf("\t\nNode %d via %d Distance %d",j+1,rt[i].from[j]+1,rt[i].dist[j]);
                }
        }
        printf("\n\n");
}

OUTPUT :



 Enter the number of nodes : 3

Enter the cost matrix :
0 2 7
2 0 1
7 1 0


For router 1
	
Node 1 via 1 Distance 0	
Node 2 via 2 Distance 2	
Node 3 via 2 Distance 3

For router 2
	
Node 1 via 1 Distance 2	
Node 2 via 2 Distance 0	
Node 3 via 3 Distance 1

For router 3
	
Node 1 via 2 Distance 3	
Node 2 via 2 Distance 1	
Node 3 via 3 Distance 0


MULIT-CLIENT - CHAT SERVER:


SERVER:

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<netinet/in.h>
#define PORT 4114
#define BUF_SIZE 2000
#define CLADDR_LEN 100
void main(){
        struct sockaddr_in addr,cl_addr;
        int sockfd,len,ret,newsockfd;
        char buffer[BUF_SIZE];
        pid_t childpid;
        char clientAddr[CLADDR_LEN];
        sockfd = socket(AF_INET,SOCK_STREAM,0);
        if(sockfd < 0){
                printf("Error creating socket!\n");
                exit(1);
        }
        printf("socket created...\n");
        memset(&addr,0,sizeof(addr));
        addr.sin_family = AF_INET;
        addr.sin_addr.s_addr = INADDR_ANY;
        addr.sin_port = PORT;
        ret = bind(sockfd,(struct sockaddr*)&addr,sizeof(addr));
        if(ret < 0){
                printf("Error binding\n");
                exit(1);
        }
        printf("Binding done..\n");
        printf("waiting for a connection...\n");
        listen(sockfd,5);
        for(;;){
                len = sizeof(cl_addr);
                newsockfd = accept(sockfd,(struct sockaddr*)&cl_addr,&len);
                if(newsockfd < 0){
                        printf("Error accepting connection!\n");
                        exit(1);
                }
                printf("Connection accepted..\n");
                inet_ntop(AF_INET,&(cl_addr.sin_addr),clientAddr,CLADDR_LEN);
                if((childpid = fork()) == 0){
                        close(sockfd);
                        for(;;){
                                memset(buffer,0,BUF_SIZE);
                                ret = recv(newsockfd,buffer,BUF_SIZE,0);
                                if(ret<0){
                                        printf("Error receiving date!\n");
                                        exit(1);
                                }
                                printf("Received data from %s : %s\n",clientAddr,buffer);
                                ret = send(newsockfd,buffer,BUF_SIZE,0);
                                if(ret<0){
                                        printf("error sending data! \n");
                                        exit(1);
                                }
                                printf("Sent data to %s : %s\n",clientAddr,buffer);
                        }
                }
                close(newsockfd);
        }
}

CLIENT 


#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<netinet/in.h>
#include<netdb.h>
#define PORT 4114
#define BUF_SIZE 2000

int main(int argc,char** argv){
        struct sockaddr_in addr,cl_addr;
        int sockfd,ret;
        char buffer[BUF_SIZE];
        struct hostent* server;
        char * serverAddr;
        if(argc < 2){
                printf("usage : client<ip address>\n");
                exit(1);
        }
        serverAddr = argv[1];
        sockfd = socket(AF_INET,SOCK_STREAM,0);
        if(sockfd < 0){
                printf("Error creating socket!\n");
                exit(1);
        }
        printf("Socket created...\n");
        memset(&addr,0,sizeof(addr));
        addr.sin_family = AF_INET;
        addr.sin_addr.s_addr = inet_addr(serverAddr);
        addr.sin_port = PORT;
        ret = connect(sockfd,(struct sockaddr*)&addr,sizeof(addr));
        if(ret < 0){
                printf("Error connecting to the server !\n");
                exit(1);
        }
        printf("connected to the server.....\n");
        memset(buffer,0,BUF_SIZE);
        printf("Enter your messages(s) : ");
        while(fgets(buffer,BUF_SIZE,stdin)!=NULL){
                ret = send(sockfd,buffer,BUF_SIZE,0);
                if(ret < 0){
                        printf("error sending data !\n\t-%s",buffer);
                }
                ret = recv(sockfd,buffer,BUF_SIZE,0);
                if(ret < 0){
                        printf("Error receiving data !\n");
                }
                else{
                        printf("Received : ");
                        fputs(buffer,stdout);
                        printf("\n");
                }
        }
        return 0;
}


SERVER SIDE OUTPUT :

socket created...
Binding done..
waiting for a connection...
Connection accepted..
Received data from 172.16.9.9 : hello i'm client-1

Sent data to 172.16.9.9 : hello i'm client-1

Connection accepted..
Received data from 172.16.9.9 : Hi i'm client2

Sent data to 172.16.9.9 : Hi i'm client2


CLIENT SIDE OUTPUT :

Socket created...
connected to the server.....
Enter your messages(s) : hello i'm client-1
Received : hello i'm client-1


Socket created...
connected to the server.....
Enter your messages(s) : Hi i'm client2
Received : Hi i'm client2


STOP & WAIT - SERVER



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<sys/socket.h>
#include<unistd.h>
#include<arpa/inet.h>

typedef struct packet{
        char data[1024];
}Packet;

typedef struct frame{
        int frame_kind;
        int sq_no;
        int ack;
        Packet packet;
}Frame;

int main(int argc,char** argv){
        if(argc != 2){
                printf("Usage: %s<port>",argv[0]);
                exit(0);
        }
        int port = atoi(argv[1]);
        int sockfd;
        struct sockaddr_in serverAddr,newAddr;
        char buffer[1024];
        socklen_t addr_size;
        int frame_id = 0;
        Frame frame_recv;
        Frame frame_send;
        sockfd = socket(AF_INET,SOCK_DGRAM,0);
        memset(&serverAddr,'\0',sizeof(serverAddr));
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_port = htons(port);
        serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
        bind(sockfd,(struct sockaddr*)&serverAddr,sizeof(serverAddr));
        addr_size = sizeof(newAddr);
        while(1){
                int f_recv_size = recvfrom(sockfd,&frame_recv,sizeof(Frame),0,(struct sockaddr*)&newAddr,&addr_size);
                if(f_recv_size > 0 && frame_recv.frame_kind == 1 && frame_recv.sq_no == frame_id){
                        printf("[+]Frame received: %s\n",frame_recv.packet.data);
                        frame_send.sq_no = 0;
                        frame_send.frame_kind = 0;
                        frame_send.ack = frame_recv.sq_no+1;
                        sendto(sockfd,&frame_send,sizeof(frame_send),0,(struct sockaddr*)&newAddr,addr_size);
                        printf("[+]Ack Send\n");
                }
                else{
                        printf("[+]Frame Not Received\n");
                }
                frame_id++;
        }close(sockfd);
        return 0;
}





STOP AND WAIT - CLIENT 


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/socket.h>

typedef struct packet{
        char data[1024];
}Packet;

typedef struct frame{
        int frame_kind;
        int sq_no;
        int ack;
        Packet packet;
}Frame;

int main(int argc , char* argv[]){
        if(argc != 2){
                printf("Usage: %s <port>",argv[0]);
                exit(0);
        }
        int port = atoi(argv[1]);
        int sockfd;
        struct sockaddr_in serverAddr;
        char buffer[1024];
        socklen_t addr_size;
        int frame_id = 0;
        Frame frame_send;
        Frame frame_recv;
        int ack_recv = 1;
        sockfd = socket(AF_INET,SOCK_DGRAM,0);
        memset(&serverAddr,'\0',sizeof(serverAddr));
        serverAddr.sin_family = AF_INET;
        serverAddr.sin_port = htons(port);
        serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
        while(1){
                if(ack_recv == 1){
                        frame_send.sq_no = frame_id;
                        frame_send.frame_kind = 1;
                        frame_send.ack = 0;
                        printf("Enter Data: ");
                        scanf("%s",buffer);
                        strcpy(frame_send.packet.data,buffer);
                        sendto(sockfd,&frame_send,sizeof(Frame),0,(struct sockaddr*)&serverAddr,sizeof(serverAddr));
                        printf("[+]Frame send\n");
                }
                int addr_size = sizeof(serverAddr);
                int f_recv_size = recvfrom(sockfd,&frame_recv,sizeof(frame_recv),0,(struct sockaddr*)&serverAddr,&addr_size);
                if(f_recv_size > 0 && frame_recv.sq_no == 0 && frame_recv.ack == frame_id+1){
                        printf("[+]Ack Received\n");
                        ack_recv = 1;
                }
                else{
                        printf("[-]Ack Not Received\n");
                        ack_recv = 0;
                }
                frame_id++;
        }
        close(sockfd);
        return 0;
}


STOP&WAIT SERVER OUTPUT

s6bcs19@admincs-ProLiant-ML10:~$ gcc stopandwait.c -o server
s6bcs19@admincs-ProLiant-ML10:~$ ./server 4008
[+]Frame received: 54321
[+]Ack Send
[+]Frame received: 0110
[+]Ack Send
[+]Frame received: bye
[+]Ack Send


CLIENT OUTPUT

s6bcs19@admincs-ProLiant-ML10:~$ gcc stopclient.c -o client
s6bcs19@admincs-ProLiant-ML10:~$ ./client 4008
Enter Data: 54321
[+]Frame send
[+]Ack Received
Enter Data: 0110
[+]Frame send
[+]Ack Received
Enter Data: bye
[+]Frame send
[+]Ack Received
Enter Data: ^Z
[5]+  Stopped



GOBACK - SERVER


#include<stdio.h>
#include<stdlib.h>
#include<netdb.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<fcntl.h>
#include<string.h>
#include<unistd.h>

void itoa(int number,char numberString[])
{
        numberString[0] = (char)(number+48);
        numberString[1] = '\0';
}

int main(){
        int sockfd,newSockfd,size,windowStart = 1,windowCurrent = 1,windowEnd = 4,oldWindowStart,flag;
        char buffer[100];
        socklen_t len;
        struct sockaddr_in server,client;
        server.sin_port = 3033;
        server.sin_addr.s_addr = INADDR_ANY;
        sockfd = socket(AF_INET,SOCK_STREAM,0);
        printf("\nStarting up");
        int k;
        k = bind(sockfd,(struct sockaddr*)&server,sizeof(server));
        if(k == 1){
                printf("Error in binding");
        }
        len = sizeof(client);
        listen(sockfd,1);
        newSockfd = accept(sockfd,(struct sockaddr*)&client,&len);
        recv(newSockfd,buffer,100,0);
        fcntl(newSockfd,F_SETFL,O_NONBLOCK);
        printf("\nReceived a request from client.Sending packets one by one");
        do{
                if(windowCurrent != windowEnd){
                        itoa(windowCurrent,buffer);
                        send(newSockfd,buffer,100,0);
                        printf("\nPacket sent : %d\n",windowCurrent);
                        windowCurrent++;
                }
                recv(newSockfd,buffer,100,0);
                if(buffer[0] == 'R'){
                        printf("\n**Received a RETRANSMIT packet.\nResending packet no.%c...",buffer[1]);
                        itoa((atoi(&buffer[1])),buffer);
                        send(newSockfd,buffer,100,0);
                        windowCurrent = atoi(&buffer[0]);
                        windowCurrent++;
                }
                else if(buffer[0] == 'A'){
                        oldWindowStart = windowStart;
                        windowStart = atoi(&buffer[1]) + 1;
                        windowEnd += (windowStart - oldWindowStart);
                        printf("\n **Received ACK %c.Moving window boundary",buffer[1]);
                }
        }while(windowCurrent != 10);
        close(sockfd);
        close(newSockfd);
        printf("\nSending Complete.Sockets closed Exiting...\n");
        return(0);
}

GOBACK - CLIENT



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<netinet/in.h>
#include<sys/socket.h>
#include<unistd.h>
int main(){
        int sockfd,newSockfd,size,firsttime = 1,currentpacket,wait = 3;
        char data[100],digit[2];
        struct sockaddr_in client;
        sockfd = socket(AF_INET,SOCK_STREAM,0);
        client.sin_family = AF_INET;
        client.sin_port = 3033;
        client.sin_addr.s_addr = INADDR_ANY;
        printf("\nStarting Up...");
        size = sizeof(client);
        printf("\nEstablishing Connection to server...");
        connect(sockfd,(struct sockaddr*)&client,size);
        sprintf(data,"REQUEST");
        send(sockfd,data,strlen(data),0);
        do{
                recv(sockfd,data,100,0);
                currentpacket = atoi(data);
                printf("\nGot packet : %d",currentpacket);
                if(currentpacket == 3 && firsttime)
                {
                        printf("\n***simulation:packet data corrupted or incomplete");
                        printf("\n ***sending RETRANSMIT for packet 1");
                        memset(&data,0,sizeof(data));
                        sprintf(data,"R1");
                        send(sockfd,data,strlen(data),0);
                        firsttime = 0;
                }
                else{
                        wait--;
                        if(!wait){
                                printf("\n***packet accpeted -> sending ACK");
                                wait = 3;
                                sprintf(data,"A");
                                digit[0] = (char)(currentpacket + 48);
                                digit[1] = '\0';
                                strcat(data,digit);
                                send(sockfd,data,strlen(data),0);
                        }
                }
        }while(currentpacket != 9);
        printf("\nAll packets received....Exiting \n");
        close(sockfd);
        return(0);
}




OUTPUT - SERVER



Starting up
Received a request from client.Sending packets one by one
Packet sent : 1

Packet sent : 2

Packet sent : 3

**Received a RETRANSMIT packet.
Resending packet no.1...
Packet sent : 2

Packet sent : 3

 **Received ACK 1.Moving window boundary
Packet sent : 4

 **Received ACK 4.Moving window boundary
Packet sent : 5

Packet sent : 6

Packet sent : 7

 **Received ACK 7.Moving window boundary
Packet sent : 8

Packet sent : 9

Sending Complete.Sockets closed Exiting...


OUTPUT - CLIENT


Starting Up...
Establishing Connection to server...
Got packet : 1
Got packet : 2
Got packet : 3
***simulation:packet data corrupted or incomplete
 ***sending RETRANSMIT for packet 1
Got packet : 1
***packet accpeted -> sending ACK
Got packet : 2
Got packet : 3
Got packet : 4
***packet accpeted -> sending ACK
Got packet : 5
Got packet : 6
Got packet : 7
***packet accpeted -> sending ACK
Got packet : 8
Got packet : 9
All packets received....Exiting 


LEAKYBUCKET

#include<stdio.h>
void main()
{
        int in,leakrate,bsize,n,bucket_storage;
        bucket_storage=0;
        printf("Enter the bucket size: ");
        scanf("%d",&bsize);
        printf("Enter the no of input: ");
        scanf("%d",&n);
        printf("Enter bucket outgoing rate: ");
        scanf("%d",&leakrate);
        printf("Intially bucket status: contian %d out of %d\n",bucket_storage,bsize);
        while(n!=0)
        {
                printf("\nEnter the incoming packet size: \n");
                scanf("%d",&in);
                printf("Incoming packet size is %d\n",in);
                if(in<=(bsize-bucket_storage))
                {
                        bucket_storage+=in;
                        printf("Bucket status: contain %d out of %d\n",bucket_storage,bsize);
                }
                else
                {
                        printf("Dropped packets: %d\n",in-(bsize-bucket_storage));
                        bucket_storage=bsize;
                        printf("Bucket status:contains %d out of %d\n",bucket_storage,bsize);
                }
                bucket_storage=bucket_storage-leakrate;
                if(bucket_storage>=0)
                {
                        printf("%d packets transmitted, bucket status: contain %d packet out of %d\n",leakrate,bucket_storage,bsize);
                }
                n--;
        }
        if(n==0 && bucket_storage!=0)
        {
                bucket_storage=0;
                printf("After sending,bucket contain %d packet out of %d \n",bucket_storage,bsize);
        }
}

SELECTIVE-REPEAT - client:

#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<string.h>
#include<pthread.h>

#define timeoutValue 5
#define packetCount 10
#define windowSize 3

typedef struct Packet {
    int id;
    int sent;
} Packet;

Packet packets[packetCount];
pthread_t thread[packetCount], receiveThread;
int sockfd;
struct sockaddr_in addr;
int windowStart, windowEnd;
int nextToSend;

void *sendPacket(void *sendPacket) {
    Packet *packet = (Packet *) sendPacket;
    char buffer[1024];
    while (packet->sent == 0) {
        printf("Client: Sending packet %d\n", packet->id);
        bzero(buffer, 1024);
        sprintf(buffer, "%d", packet->id);
        sendto(sockfd, buffer, 1024, 0, (struct sockaddr *) &addr, sizeof(addr));
        sleep(timeoutValue);
        if (packet->sent == 0)
            printf("Client: Timeout for packet %d\n", packet->id);
    }
    return NULL;
}

void *receivePacket(void *arg) {
    socklen_t addr_size = sizeof(addr);
    char buffer[1024];
    while (1) {
        bzero(buffer, 1024);
        recvfrom(sockfd, buffer, 1024, 0, (struct sockaddr *) &addr, &addr_size);
        char msg[20];
        int packetID;
        sscanf(buffer, "%s %d", msg, &packetID);
        if (strcmp(msg, "NACK") == 0) {
            printf("Client: Received negative acknowledgement for packet %d\nSending again\n", packetID);
            pthread_cancel(thread[packetID - 1]);
            pthread_create(&thread[packetID - 1], NULL, sendPacket, (void *) &packets[packetID - 1]);
        } else if (strcmp(msg, "ACK") == 0) {
            printf("Client: Received acknowledgement for packet %d\n", packetID);
            packets[packetID - 1].sent = 1;
            if (windowStart == packetID - 1) {
                while (packets[windowStart].sent == 1) {
                    windowStart++;
                    if (windowEnd < packetCount)
                        windowEnd++;
                }
            }
        } else {
            printf("Client: Invalid message\n");
        }
    }
    return NULL;
}

int main() {
    for (int i = 0; i < packetCount; ++i) {
        packets[i].id = i + 1;
        packets[i].sent = 0;
    }
    char *ip = "127.0.0.100";
    int port = 2878;
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("[-]Socket error");
        exit(1);
    }
    memset(&addr, '\0', sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = inet_addr(ip);
    pthread_create(&receiveThread, NULL, receivePacket, NULL);
    windowStart = 0;
    windowEnd = windowStart + windowSize - 1;
    for (int i = windowStart; i <= windowEnd; ++i) {
        pthread_create(&thread[i], NULL, sendPacket, (void *) &packets[i]);
    }
    nextToSend = windowEnd + 1;
    while (windowStart < packetCount) {
        if (nextToSend <= windowEnd && nextToSend < packetCount) {
            pthread_create(&thread[nextToSend], NULL, sendPacket, (void *) &packets[nextToSend]);
            nextToSend++;
        }
    }
    for (int i = 0; i < packetCount; ++i) {
        pthread_join(thread[i], NULL);
    }
    pthread_join(receiveThread, NULL);
    close(sockfd);
    return 0;
}



SELECTIVE REPEAT - server

#include<stdio.h>
#include<string.h>
#include<time.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<stdlib.h>
#include<string.h>

#define packetCount 10

typedef struct packet{
        int id;
        int received;
}packet;

packet packets[packetCount];

void main(){
        for(int i = 0;i<packetCount;++i){
                packets[i].id = i+1;
                packets[i].received = 0;
        }
        char *ip = "127.0.0.100";
        int port = 2878;
        srand(time(0));
        int sockfd;
        struct sockaddr_in server_addr,client_addr;
        char buffer[1024];
        socklen_t addr_size;
        int n;
        sockfd = socket(AF_INET,SOCK_DGRAM,0);
        if(sockfd < 0){
                perror("[-]Socket error");
                exit(1);
        }
        memset(&server_addr,'\0',sizeof(server_addr));
        server_addr.sin_family = AF_INET;
        server_addr.sin_port = htons(port);
        server_addr.sin_addr.s_addr = inet_addr(ip);
        n = bind(sockfd,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(n<0){
                perror("[+]bind error");
                exit(1);
        }
        while(1){
                bzero(buffer,1024);
                addr_size = sizeof(client_addr);
                recvfrom(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,&addr_size);
                sleep(1);
                int packet = atoi(buffer);
                if (packets[packet-1].received == 1 || rand() % 5 == 0)
                        continue;
                else if(rand() % 4 == 0){
                        printf("Server:Received corrupted packet %s.Sending negative acknowloedgement\n",buffer);
                        sprintf(buffer,"NACK %d",packet);
                        sendto(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,sizeof(client_addr));
                }
                else{
                        printf("Server:Received packet %s.Sending acknowledgement\n",buffer);
                        sprintf(buffer,"ACK %d",packet);
                        sendto(sockfd,buffer,1024,0,(struct sockaddr*)&client_addr,sizeof(client_addr));
                        packets[packet-1].received = 1;
                }
        }
}



















FTP - SERVER

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>

void main()
{
        int server_sock,client_sock;
        struct sockaddr_in server_addr,client_addr;
        socklen_t addr_size;
        server_sock=socket(AF_INET,SOCK_STREAM,0);
        if(server_sock<0)
        {
                perror("socket error\n");
                exit(1);
        }
        memset(&server_addr,'\0',sizeof(server_addr));
        server_addr.sin_family=AF_INET;
        server_addr.sin_port=htons(2990);
        server_addr.sin_addr.s_addr=inet_addr("127.0.0.100");
        int n=bind(server_sock,(struct sockaddr*)&server_addr,sizeof(server_addr));
        if(n<0)
        {
                perror("bind error\n");
                exit(1);
        }
        listen(server_sock,1024);
        addr_size=sizeof(client_addr);
        client_sock=accept(server_sock,(struct sockaddr *)&client_addr,&addr_size);
        char buffer[1024];
        char filename[100];
        FILE *fptr;
        while(1)
        {
                bzero(buffer,1024);
                recv(client_sock,buffer,1024,0);
                if(strcmp(buffer,"PUT")==0)
                {
                        bzero(buffer,1024);
                        recv(client_sock,buffer,1024,0);
                        strcpy(filename,buffer);
                        bzero(buffer,1024);
                        fptr=fopen(filename,"w");
                        while(1)
                        {
                                recv(client_sock,buffer,1024,0);
                                printf("buffer=%s\n",buffer);
                                if(strcmp(buffer,"END$")==0)
                                        break;
                                fprintf(fptr,"%s",buffer);
                                bzero(buffer,1024);
                        }
        printf("file %s recieved\n",filename);
        fclose(fptr);
        }
        else if(strcmp(buffer,"GET")==0)
        {
                bzero(buffer,1024);
                sprintf(buffer,"%d",getpid());
                send(client_sock,buffer,1024,0);
                bzero(buffer,1024);
                recv(client_sock,buffer,1024,0);
                strcpy(filename,buffer);
                bzero(buffer,1024);
                fptr=fopen(filename,"r");
                if(!fptr)
                {
                        printf("file %s does not exist\n",filename);
                        strcpy(buffer,"404");
                        send(client_sock,buffer,1024,0);
                }
                else
                {
                        strcpy(buffer,"200");
                        send(client_sock,buffer,1024,0);
                        while(!feof(fptr))
                        {
                                bzero(buffer,1024);
                                fscanf(fptr,"%[^\n]",buffer);
                                send(client_sock,buffer,1024,0);
                        }
                                bzero(buffer,1024);
                                strcpy(buffer,"END$");
                                send(client_sock,buffer,1024,0);
                                fclose(fptr);
                                printf("file %s sent\n",filename);
                        }
                }
                else if(strcmp(buffer,"BYE")==0)
                {
                        close(server_sock);
                        exit(0);
                }
        }
}










FTP - CLIENT

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
void main()
        {
         int server_sock;

         struct sockaddr_in server_addr;
         socklen_t addr_size;
         server_sock=socket(AF_INET,SOCK_STREAM,0);
         if(server_sock<0)
                {
                perror("socket error\n");
                exit(1);
                }
         memset(&server_addr,'\0',sizeof(server_addr));
         server_addr.sin_family=AF_INET;
         server_addr.sin_port=htons(2990);
         server_addr.sin_addr.s_addr=inet_addr("127.0.0.100");
         connect(server_sock,(struct sockaddr *)&server_addr,sizeof(server_addr));
         char buffer[1024];
         int choice;
         char filename[100];
         FILE *fptr;
         while(1)
                {
                 printf("\n 1.Upload a file(PUT)\n 2.Download a file(GET)\n 3.Exit(BYE)\n enter choice:");
                 scanf("%d",&choice);
                 switch(choice)
                        {
                                case 1:
                                        bzero(buffer,1024);
                                        strcpy(buffer,"PUT");
                                        printf("enter filename:");
                                        scanf("%s",filename);
                                        fptr=fopen(filename,"r");
                                        if(!fptr)
                                                 perror("file doesn't exist!\n");
                                         else
                                                {
                                                 send(server_sock,buffer,1024,0);
                                                 bzero(buffer,1024);
                                                 strcpy(buffer,filename);
                                                 send(server_sock,buffer,1024,0);
                                                 bzero(buffer,1024);
                                                 while(!feof(fptr))
                                                        {
                                                         bzero(buffer,1024);
                                                         fscanf(fptr,"%[^\n]",buffer);
                                                         send(server_sock,buffer,1024,0);
                                                        }
                                                 bzero(buffer,1024);
                                                 strcpy(buffer,"END$");
                                                 send(server_sock,buffer,1024,0);
                                                 fclose(fptr);
                                                 printf("File %s send \n",filename);
                                                 }
                                         break;
                                case 2:
                                        bzero(buffer,1024);
                                        strcpy(buffer,"GET");
                                        send(server_sock,buffer,1024,0);
                                        bzero(buffer,1024);
                                        recv(server_sock,buffer,1024,0);
                                        printf("Process id: %s\n",buffer);
                                        printf("enter filename:");
                                        scanf("%s",filename);
                                        bzero(buffer,1024);
                                        strcpy(buffer,filename);
                                        send(server_sock,buffer,1024,0);
                                        bzero(buffer,1024);
                                        recv(server_sock,buffer,1024,0);
                                        if(strcmp(buffer,"404")==0)
                                                printf("File does not exist in remote server \n");
                                        else if(strcmp(buffer,"200")==0)
                                                {
                                                 fptr=fopen(filename,"w");
                                                 while(1)
                                                        {
                                                         recv(server_sock,buffer,1024,0);
                                                         if(strcmp(buffer,"END$")==0)
                                                         break;
                                                         fprintf(fptr,"%s",buffer);
                                                         bzero(buffer,1024);
                                                        }
                                                 fclose(fptr);
                                                 printf("File %s received \n",filename);
                                                }
                                        break;
                                case 3:
                                        bzero(buffer,1024);
                                        strcpy(buffer,"BYE");
                                        send(server_sock,buffer,1024,0);
                                        close(server_sock);
                                        exit(0);
                        }
                }
        }





